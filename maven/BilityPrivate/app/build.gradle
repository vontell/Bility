apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "io.github.ama_csail.amaexampleapp"
        minSdkVersion 18
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // ADDED FOR TESTING
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation('com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
    androidTestImplementation('com.schibsted.spain:barista:2.4.0') {
        exclude group: 'com.android.support'
        exclude group: 'org.jetbrains.kotlin' // Only if you already use Kotlin in your project
    }
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:cardview-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.squareup.okhttp3:okhttp:3.9.0'
    implementation 'com.android.support:customtabs:26.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation project(path: ':ama')
    testImplementation "org.robolectric:robolectric:3.7.1"
    implementation project(path: ':ama')
    lintChecks project(':amalints')
}

import com.android.ddmlib.AndroidDebugBridge
import com.android.ddmlib.CollectingOutputReceiver

task grantTestPermissions {

    description = "Press the power button of a device using the adb."

    AndroidDebugBridge.initIfNeeded(false)
    def bridge = AndroidDebugBridge.createBridge(android.adbExecutable.path, false)
    def receiver = CollectingOutputReceiver.newInstance()

    doLast {
        bridge.devices.each {
            it.executeShellCommand("pm grant io.github.ama_csail.amaexampleapp android.permission.WRITE_EXTERNAL_STORAGE", receiver)
            println "Value: ${receiver.getOutput()}"
        }
        System.out.println("Granted permissons!!!!")
    }
}

task downloadAccessibleTestFiles {

    description = "Grabs files from a recent accessible test run"

    AndroidDebugBridge.initIfNeeded(false)
    def bridge = AndroidDebugBridge.createBridge(android.adbExecutable.path, false)
    def receiver = CollectingOutputReceiver.newInstance()
    System.out.println(android.adbExecutable.path)

    doLast {
        bridge.devices.each {
            it.executeShellCommand(android.adbExecutable.path + " pull /storage/emulated/0/screenshotNew.png ~/Desktop", receiver)
            println "Value: ${receiver.getOutput()}"
        }
        System.out.println("Downloaded files")
    }

}

